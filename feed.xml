<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leonids</title>
    <description>A simple and awesome blog theme powered by jekyll.</description>
    <link>https://WenYang-Lai.github.io//</link>
    <atom:link href="https://WenYang-Lai.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 04 Jul 2018 23:42:03 +0800</pubDate>
    <lastBuildDate>Wed, 04 Jul 2018 23:42:03 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>&amp;#91;Pwnable.TW&amp;#93; secret_of_my_heart</title>
        <description>&lt;p&gt;First, check its protection info.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Arch:     amd64-64-little
RELRO:    Full RELRO
Stack:    Canary found
NX:       NX enabled
PIE:      PIE enabled
FORTIFY:  Enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can simply see there are two vulnerabilites in the binary.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In the &lt;code&gt;add_secret&lt;/code&gt; the input of name without null byte, so we can leak &lt;code&gt;heap address&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;After we input the &lt;code&gt;secret&lt;/code&gt;, it will add a null byte padding behind our payload. It will cause &lt;code&gt;off by one null byte heap overflow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After leaking heap address, we can launch unlink attack by making a fake pointer on the heap, so we will not revise the original pointer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                0x00005615ddaf6030
                ------------------------------------------
secret[1] -&amp;gt;	|0x0000000000000000      0x0000000000000091|
fake fd,bk-&amp;gt;	|0x00005615ddaf60c8      0x00005615ddaf60d0|
                |0x4141414141414141      0x4141414141414141|
                |0x4141414141414141      0x4141414141414141|
                |0x4141414141414141      0x4141414141414141|
                |0x4141414141414141      0x4141414141414141|
                |0x4141414141414141      0x4141414141414141|
                |0x4141414141414141      0x4141414141414141|
                |0x4141414141414141      0x4141414141414141|
			
                0x00005615ddaf60c0
                ------------------------------------------ 
secret[2] -&amp;gt;	|0x0000000000000090      0x0000000000000100|
                |0x0000000000000000      0x0000000000000000|
fake ptr -&amp;gt;	|0x00005615ddaf6030      0x0000000000000000|
                |0x0000000000000000      0x0000000000000000|
                |0x0000000000000000      0x0000000000000000|
                        ...		           ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After &lt;code&gt;del_secret(2)&lt;/code&gt;, we can simple leak &lt;code&gt;libc&lt;/code&gt; by &lt;code&gt;show_secret(1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, Itâ€™s difficult to overwrite &lt;code&gt;_malloc_hook&lt;/code&gt;. 
I decided to use&lt;code&gt;FILE stream oriented programming&lt;/code&gt; to solve it. (&lt;a href=&quot;http://blog.angelboy.tw/&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;First, I cosolidate all the chunk on the heap. However, we still have secret[1] pointer. 
So, there is a overlap chunk at &lt;code&gt;0x00005615ddaf6030&lt;/code&gt;, and heap top at &lt;code&gt;0x00005615ddaf6000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, add three secret with size 0x40(&lt;code&gt;secret[0]&lt;/code&gt;), 0x80(&lt;code&gt;secret[2]&lt;/code&gt;), and 0x80(&lt;code&gt;secret[3]&lt;/code&gt;), respectively.
Our goal is launching unsorted bin attack on secret[2] chunk. In the first chunk, we modify the secret[1] chunk header to 0x81. And secret[3] make our partial fake &lt;code&gt;_IO_FILE&lt;/code&gt;, &lt;code&gt;vtable&lt;/code&gt;, &lt;code&gt;wide_date&lt;/code&gt; objects.&lt;/p&gt;

&lt;h4 id=&quot;iofile-structure&quot;&gt;_IO_FILE structure&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;0x00:   ------------------------------
        |        &#39;/bin/sh\x00&#39;        |
         -----------------------------
        |                             |
        |                             |
        |           ......            |
        |                             |
        |                             |
0xa0:	-----------------------------
        |        wide_date ptr	      |
         -----------------------------
        |            ...              |
        |            ...              |
0xc0:	-----------------------------
        |            mode             |
         -----------------------------
        |            ...              |
         -----------------------------
        |            ...              |
         -----------------------------
        |          vtable ptr	      |
0xe0:	------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;widedata-structure&quot;&gt;wide_data structure&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IO_wide_data&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_read_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Current read pointer */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_read_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* End of get area. */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_read_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Start of putback+get area. */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_write_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Start of put area. */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_write_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Current put pointer. */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_write_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* End of put area. */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_buf_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Start of reserve area. */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;vtable-structure&quot;&gt;vtable structure&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IO_jump_t&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_G_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef _G_USING_THUNKS
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_G_size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__dummy2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_finish_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_overflow_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_underflow_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__underflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_underflow_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__uflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_pbackfail_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pbackfail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* showmany */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_xsputn_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__xsputn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_xsgetn_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__xsgetn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUMP_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_IO_seekoff_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__seekoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then &lt;code&gt;del_secret(1)&lt;/code&gt; and &lt;code&gt;del_secret(2)&lt;/code&gt;, since &lt;code&gt;secret[1]&lt;/code&gt; size is fastbin size. 
&lt;code&gt;secret[1]&lt;/code&gt; will be append to &lt;code&gt;fastbin[6]&lt;/code&gt;, &lt;code&gt;secret[2]&lt;/code&gt; will be added to &lt;code&gt;unsorted bin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When we add a secret with size 0x78, will get original &lt;code&gt;secret[1]&lt;/code&gt; overlaping with unsorted bin chunk.
Thus, we have full &lt;code&gt;unsorted bin attack&lt;/code&gt; and &lt;code&gt;FILE stream programming payload&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                                0x00005615ddaf6000
                                  ------------------------------------------
                secret[0] -&amp;gt;     |0x0000000000000000      0x0000000000000051|
                                 |0x0000000000000000      0x0000000000000000|
                                 |0x0000000000000000      0x0000000000000000|
                
                                0x00005615ddaf6030
                                  ------------------------------------------
        original secret[1] -&amp;gt;    |0x0000000000000000      0x0000000000000081|
                                 |0x0000000000000000      0x0000000000000000|


                                0x00005615ddaf6050
                                  ------------------------------------------
secret[2], _IO_FILE object -&amp;gt;    |0x0068732f6e69622f      0x0000000000000061|
                                 |0x00007fcd76793b78      0x00007fcd76794510|
                                 |0x0000000000000000      0x0000000000000000|
                                 |0x0000000000000000      0x0000000000000000|
                                 |0x0000000000000000      0x0000000000000000|
                                 |0x0000000000000000      0x0000000000000000|
                                 |0x0000000000000000      0x0000000000000000|
                                 |0x0000000000000000      0x0000000000000000|
                                 |0x0000000000000000      0x0000000000000000|
                
                                0x00005615ddaf60e0
                                  ------------------------------------------
                 secret[3] -&amp;gt;    |0x0000000000000090      0x0000000000000090|
        fake wide_date ptr -&amp;gt;    |0x00005615ddaf6120      0x0000000000000000|
                                 |0x0000000000000000      0x0000000000000000|
                                 |0x0000000000000001      0x0000000000000000|
           fake vtable ptr -&amp;gt;    |0x0000000000000000      0x00005615ddaf6150|
                                 |0x0000000000000001      0x0000000000000002|
                                 |0x0000000000000003      0x0000000000000000|
                                 |0x0000000000000000      0x0000000000000000|
                                 |0x0000000000000000      0x00007fcd76415390|
                 top chunk -&amp;gt;    |0x0000000000000000      0x0000000000020e91|
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Thu, 21 Dec 2017 00:00:00 +0800</pubDate>
        <link>https://WenYang-Lai.github.io//articles/2017-12/%5BPwnableTW%5D-secret_of_my_heart</link>
        <guid isPermaLink="true">https://WenYang-Lai.github.io//articles/2017-12/%5BPwnableTW%5D-secret_of_my_heart</guid>
        
        
        <category>ctf</category>
        
        <category>pwn</category>
        
      </item>
    
  </channel>
</rss>
